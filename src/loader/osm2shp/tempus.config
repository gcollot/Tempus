void setup_shapefiles()
{
    // set up your shapefiles. for each of the files you want to create,
    // make one call to shapefile_new, with the following parameters:
    //
    // shapefile_new(id, type, basename, num_attrs, ...)
    //
    // where:
    //
    // id -        the number of the file. start with 0 and count upwards.
    // type -      put SHPT_POINT for point files, SHPT_ARC for line files,
    //             and SHPT_POLYGON for areas.
    //             Use SHPT_NULL for attribute only (no .shp, only .dbf)
    // basename -  the file name; extensions .dbf/.shp/.shx will be added.
    // num_attrs - how many attributes you want in the dbf file.
    //
    // for each attribute you will then have to specify the following:
    //
    // a name -    for the name of the column in the .dbf file;
    // a type -    put FTString for strings, FTInteger for integers, and
    //             FTDouble for doubles;
    // a length -  how many characters or digits the value  may have, and
    // decimals -  only for FTDouble, the number of decimals.

    shapefile_new( 0, SHPT_ARC, "highway", 7,
                   "osm_id", FTInteger, 11,
                   "name", FTString, 48,
                   "type", FTString, 16,
                   "oneway", FTString, 6,
                   "lanes", FTInteger, 1,
                   "bridge", FTInteger, 1,
                   "tunnel", FTInteger, 1
                   );

    shapefile_new( 1, SHPT_NULL, "restriction", 3,
                   "osm_id", FTInteger, 11,
                   "from_id", FTInteger, 11,
                   "to_id", FTInteger, 11
                   );
}

/**
 * Called when a node has been fully read.
 */
void process_osm_node()
{
}

/**
 * Called when a way has been fully read.
 * You will find its ID in current_id and its tags in the g_hash_table
 * current_tags.
 */
void process_osm_way()
{
    // this is executed whenever a way is fully read.
    //
    // You will find its ID in current_id and its tags in the g_hash_table
    // current_tags.
    //
    // Determine whether you want the way added to one of your shapefiles,
    // and if yes, call
    //
    // shapefile_add_way(id, ...)
    //
    // where "id" is the number of the file you have used during setup,
    // and "..." is the list of attributes, which must match number and
    // type as specified during setup.

    std::map<std::string,std::string>::const_iterator
    found = current_tags.find( "highway" );

    if ( found != current_tags.end() ) {
        std::map<std::string,std::string>::const_iterator
        oneway = current_tags.find( "oneway" );

        shapefile_add_way( 0,
                           current_id,
                           current_tags["name"].c_str(),
                           found->second.c_str(),
                           oneway != current_tags.end() ? oneway->second.c_str() : "",
                           extract_integer_tag( "lanes", 0 ),
                           extract_boolean_tag( "bridge", 0 ),
                           extract_boolean_tag( "tunnel", 0 )
                           );
        return;
    }
}

void process_osm_relation()
{
    std::map<std::string,std::string>::const_iterator
    mtype = current_tags.find( "type" );
    if ( mtype != current_tags.end() && mtype->second == "restriction" ) {
        std::map<std::string, std::string>::const_iterator rel_type = current_tags.find("restriction");
        if ( rel_type == current_tags.end() ) {
            std::cout << "Untyped restriction #" << current_id << std::endl;
            return;
        }
        int from_id = 0;
        int to_id = 0;
        for ( size_t i = 0; i < current_members.size(); i++ ) {
            if ( current_members[i].role == "from" ) {
                if ( from_id ) {
                    // only consider restriction with one "from" and one "to"
                    return;
                }
                from_id = current_members[i].ref;
            }
            else if ( current_members[i].role == "to" ) {
                if ( to_id ) {
                    // only consider restriction with one "from" and one "to"
                    return;
                }
                to_id = current_members[i].ref;
            }
        }
        shapefile_add_attributes( 1,
                                  current_id,
                                  from_id,
                                  to_id
                                  );
    }
}

